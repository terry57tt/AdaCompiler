

FICHIER -> with ADA_TEXT_IO point_virgule USE ADA_TEXT_IO point_virgule procedure IDENT is DECLSTAR begin INSTR INSTRSTAR end IDENTINTERRO point_virgule eof .
DECLSTAR -> DECL DECLSTAR .
DECLSTAR -> .
INSTRSTAR -> INSTR INSTRSTAR .
INSTRSTAR -> .
IDENTINTERRO -> IDENT .
IDENTINTERRO -> .
IDENTSTAR -> IDENT IDENTSTAR .
IDENTSTAR -> .
DECL -> type IDENT DECL2 .
DECL2 -> point_virgule .
DECL2 -> is DECL3 .
DECL3 -> access IDENT point_virgule .
DECL3 -> record CHAMPS CHAMPSSTAR end record point_virgule .
DECL -> IDENT IDENTSTAR virgule deux_points TYPE EXPRINTERRO point_virgule .
DECL -> procedure IDENT PARAMSINTERRO is DECLSTAR begin INSTR INSTRSTAR end IDENTINTERRO point_virgule .
DECL -> function IDENT PARAMSINTERRO return TYPE is DECLSTAR begin INSTR INSTRSTAR end IDENTINTERRO point_virgule .
CHAMPS -> IDENT IDENTSTAR virgule deux_points TYPE point_virgule .
EXPRINTERRO -> deux_points egal EXPR .
EXPRINTERRO -> .
CHAMPSSTAR -> CHAMPS CHAMPSSTAR .
CHAMPSSTAR -> .
PARAMSINTERRO -> PARAMS .
PARAMSINTERRO -> .
TYPE -> IDENT .
TYPE -> access IDENT point_virgule .
PARAMS -> parenthese_ouvrante PARAM PARAMSTAR point_virgule parenthese_fermante point_virgule .
PARAMSTAR -> PARAM PARAMSTAR .
PARAMSTAR -> .
PARAM -> IDENT IDENTSTAR virgule deux_points MODEINTERRO TYPE point_virgule .
MODE -> in .
MODE -> inout point_virgule .
MODEINTERRO -> MODE .
MODEINTERRO -> .


EXPR -> RELATION .
RELATION -> new IDENT .
EXPR -> IDENT SUITE_APPEL_FONCTION .
SUITE_APPEL_FONCTION -> parenthese_ouvrante EXPR EXPRSTAR_VIRGULE parenthese_fermante .
RELATION -> character apostrophe val parenthese_ouvrante EXPR parenthese_fermante .

RELATION -> TERME_1 PRIORITE_OR .
PRIORITE_OR -> or PRIORITE_OR_2 .
PRIORITE_OR -> .
PRIORITE_OR_2 -> TERME_1 PRIORITE_OR .
PRIORITE_OR_2 -> else TERME_1 PRIORITE_OR .
TERME_1 -> TERME_2 PRIORITE_AND .
PRIORITE_AND -> and PRIORITE_AND_2 .
PRIORITE_AND -> .
PRIORITE_AND_2 -> TERME_2 PRIORITE_AND .
PRIORITE_AND_2 -> then TERME_2 PRIORITE_AND .
TERME_2 -> TERME_3 PRIORITE_NOT .
PRIORITE_NOT -> not TERME_3 PRIORITE_NOT .
PRIORITE_NOT -> .
TERME_3 -> TERME_4 PRIORITE_EGAL .
PRIORITE_EGAL -> slash_egal TERME_4 PRIORITE_EGAL .
PRIORITE_EGAL -> egal TERME_4 PRIORITE_EGAL .
PRIORITE_EGAL -> .
TERME_4 -> TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> inferieur TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> inferieur_egal TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> superieur TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> superieur_egal TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> .
TERME_5 -> TERME_6 PRIORITE_ADDITION .
PRIORITE_ADDITION -> plus TERME_6 PRIORITE_ADDITION .
PRIORITE_ADDITION -> moins TERME_6 PRIORITE_ADDITION .
PRIORITE_ADDITION -> .
TERME_6 -> TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> fois TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> divise TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> rem TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> .
TERME_7 -> FACTEUR PRIORITE_POINT .
TERME_7 -> moins FACTEUR PRIORITE_POINT .
PRIORITE_POINT -> point IDENT PRIORITE_POINT .
PRIORITE_POINT -> .
FACTEUR -> parenthese_ouvrante EXPR parenthese_fermante .
FACTEUR -> entier .
FACTEUR -> caractere .
FACTEUR -> true .
FACTEUR -> false .
FACTEUR -> null .  

RELATION_POINT_IDENT -> new IDENT point IDENT.
RELATION_POINT_IDENT -> character apostrophe val parenthese_ouvrante EXPR parenthese_fermante point IDENT.
RELATION_POINT_IDENT -> TERME_1_POINT_IDENT PRIORITE_OR_POINT_IDENT .
PRIORITE_OR_POINT_IDENT -> or PRIORITE_OR_2_POINT_IDENT .
PRIORITE_OR_POINT_IDENT -> .
PRIORITE_OR_2_POINT_IDENT -> TERME_1_POINT_IDENT PRIORITE_OR_POINT_IDENT .
PRIORITE_OR_2_POINT_IDENT -> else TERME_1_POINT_IDENT PRIORITE_OR_POINT_IDENT .
TERME_1_POINT_IDENT -> TERME_2_POINT_IDENT PRIORITE_AND_POINT_IDENT .
PRIORITE_AND_POINT_IDENT -> and PRIORITE_AND_2_POINT_IDENT .
PRIORITE_AND_POINT_IDENT -> .
PRIORITE_AND_2_POINT_IDENT -> TERME_2_POINT_IDENT PRIORITE_AND_POINT_IDENT .
PRIORITE_AND_2_POINT_IDENT -> then TERME_2_POINT_IDENT PRIORITE_AND_POINT_IDENT .
TERME_2_POINT_IDENT -> TERME_3_POINT_IDENT PRIORITE_NOT_POINT_IDENT .
PRIORITE_NOT_POINT_IDENT -> not TERME_3_POINT_IDENT PRIORITE_NOT_POINT_IDENT .
PRIORITE_NOT_POINT_IDENT -> .
TERME_3_POINT_IDENT -> TERME_4_POINT_IDENT PRIORITE_EGAL_POINT_IDENT .
PRIORITE_EGAL_POINT_IDENT -> slash_egal TERME_4_POINT_IDENT PRIORITE_EGAL_POINT_IDENT .
PRIORITE_EGAL_POINT_IDENT -> egal TERME_4_POINT_IDENT PRIORITE_EGAL_POINT_IDENT .
PRIORITE_EGAL_POINT_IDENT -> .
TERME_4_POINT_IDENT -> TERME_5_POINT_IDENT PRIORITE_INFERIEUR_POINT_IDENT .
PRIORITE_INFERIEUR_POINT_IDENT -> inferieur TERME_5_POINT_IDENT PRIORITE_INFERIEUR_POINT_IDENT .
PRIORITE_INFERIEUR_POINT_IDENT -> inferieur_egal TERME_5_POINT_IDENT PRIORITE_INFERIEUR_POINT_IDENT .
PRIORITE_INFERIEUR_POINT_IDENT -> superieur TERME_5_POINT_IDENT PRIORITE_INFERIEUR_POINT_IDENT .
PRIORITE_INFERIEUR_POINT_IDENT -> superieur_egal TERME_5_POINT_IDENT PRIORITE_INFERIEUR_POINT_IDENT .
PRIORITE_INFERIEUR_POINT_IDENT -> .
TERME_5_POINT_IDENT -> TERME_6_POINT_IDENT PRIORITE_ADDITION_POINT_IDENT .
PRIORITE_ADDITION_POINT_IDENT -> plus TERME_6_POINT_IDENT PRIORITE_ADDITION_POINT_IDENT .
PRIORITE_ADDITION_POINT_IDENT -> moins TERME_6_POINT_IDENT PRIORITE_ADDITION_POINT_IDENT .
PRIORITE_ADDITION_POINT_IDENT -> .
TERME_6_POINT_IDENT -> TERME_7_POINT_IDENT PRIORITE_MULTIPLICATION_POINT_IDENT .
PRIORITE_MULTIPLICATION_POINT_IDENT -> fois TERME_7_POINT_IDENT PRIORITE_MULTIPLICATION_POINT_IDENT .
PRIORITE_MULTIPLICATION_POINT_IDENT -> divise TERME_7_POINT_IDENT PRIORITE_MULTIPLICATION_POINT_IDENT .
PRIORITE_MULTIPLICATION_POINT_IDENT -> rem TERME_7_POINT_IDENT PRIORITE_MULTIPLICATION_POINT_IDENT .
PRIORITE_MULTIPLICATION_POINT_IDENT -> .

TERME_7_POINT_IDENT -> FACTEUR_POINT_IDENT point IDENT PRIORITE_POINT.
TERME_7_POINT_IDENT -> moins FACTEUR_POINT_IDENT point IDENT PRIORITE_POINT.
FACTEUR_POINT_IDENT -> parenthese_ouvrante EXPR parenthese_fermante.
FACTEUR_POINT_IDENT -> entier.
FACTEUR_POINT_IDENT -> caractere.
FACTEUR_POINT_IDENT -> true.
FACTEUR_POINT_IDENT -> false.
FACTEUR_POINT_IDENT -> null.


INSTR -> RELATION point IDENT INSTR2 .
INSTR2 -> SUITE_APPEL_FONCTION INSTR3 .
INSTR -> IDENT INSTR2 .
INSTR2 -> deux_points_egal EXPR point_virgule .
INSTR2 -> point_virgule .
INSTR3 -> point IDENT INSTR2 .
INSTR3 -> point_virgule .
INSTR -> return EXPRINTERRO point_virgule .
INSTR -> begin INSTR INSTRSTAR end point_virgule .
INSTR -> if EXPR then INSTR INSTRSTAR ELSIFSTAR end if point_virgule .
INSTR -> for IDENT in REVERSEINTERRO EXPR point_point EXPR loop INSTR INSTRSTAR end loop point_virgule .
INSTR -> while EXPR loop INSTR INSTRSTAR end loop point_virgule .
REVERSEINTERRO -> reverse .
REVERSEINTERRO -> .
ELSIFSTAR -> elsif EXPR then INSTR INSTRSTAR ELSIFSTAR .
ELSIFSTAR -> else INSTR INSTRSTAR parenthese_fermante .
ELSIFSTAR -> .
EXPRSTAR_VIRGULE -> virgule EXPR EXPRSTAR_VIRGULE .
EXPRSTAR_VIRGULE -> .
IDENT -> idf .

EXPR -> EXPR point ident

EXPR -> point_ident EXPR_PRIME
EXPR_PRIME -> 

OPERATEUR FACTEUR point IDENT 
