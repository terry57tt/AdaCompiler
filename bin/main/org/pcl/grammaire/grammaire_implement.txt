FICHIER -> with ADA_TEXT_IO point_virgule USE ADA_TEXT_IO point_virgule procedure IDENT is DECLSTAR begin INSTR INSTRSTAR end IDENTINTERRO point_virgule eof .
DECLSTAR -> DECL DECLSTAR .
DECLSTAR -> .
INSTRSTAR -> INSTR INSTRSTAR .
INSTRSTAR -> .
IDENTINTERRO -> IDENT .
IDENTINTERRO -> .
IDENTSTAR_VIRGULE -> virgule IDENT IDENTSTAR_VIRGULE.
IDENTSTAR_VIRGULE -> .
DECL -> type IDENT DECL2 .
DECL2 -> point_virgule .
DECL2 -> is DECL3 .
DECL3 -> access IDENT point_virgule .
DECL3 -> record CHAMPS CHAMPSSTAR end record point_virgule .
DECL -> IDENT IDENTSTAR_VIRGULE deux_points TYPE EXPRINTERRO point_virgule .
DECL -> procedure IDENT PARAMSINTERRO is DECLSTAR begin INSTR INSTRSTAR end IDENTINTERRO point_virgule .
DECL -> function IDENT PARAMSINTERRO return TYPE is DECLSTAR begin INSTR INSTRSTAR end IDENTINTERRO point_virgule .
CHAMPS -> IDENT IDENTSTAR_VIRGULE deux_points TYPE point_virgule .
EXPRINTERRO -> deux_points egal EXPR .
EXPRINTERRO -> .
CHAMPSSTAR -> CHAMPS CHAMPSSTAR .
CHAMPSSTAR -> .
PARAMSINTERRO -> PARAMS .
PARAMSINTERRO -> .
TYPE -> IDENT .
TYPE -> access IDENT point_virgule .
PARAMS -> parenthese_ouvrante PARAM PARAMSTAR_POINT_VIRGULE parenthese_fermante.
PARAMSTAR_POINT_VIRGULE -> point_virgule PARAM PARAMSTAR_POINT_VIRGULE .
PARAMSTAR_POINT_VIRGULE -> .
PARAM -> IDENT IDENTSTAR_VIRGULE deux_points MODEINTERRO TYPE point_virgule .
MODE -> in .
MODE -> inout point_virgule .
MODEINTERRO -> MODE .
MODEINTERRO -> .


EXPR-> TERME_1 PRIORITE_OR .

PRIORITE_OR -> or PRIORITE_OR_2 .
PRIORITE_OR -> .

PRIORITE_OR_2 -> TERME_1 PRIORITE_OR .
PRIORITE_OR_2 -> else TERME_1 PRIORITE_OR .

TERME_1 -> TERME_2 PRIORITE_AND .

PRIORITE_AND -> and PRIORITE_AND_2 .
PRIORITE_AND -> .

PRIORITE_AND_2 -> TERME_2 PRIORITE_AND .
PRIORITE_AND_2 -> then TERME_2 PRIORITE_AND .

TERME_2 -> TERME_3 PRIORITE_NOT .

PRIORITE_NOT -> not TERME_3 PRIORITE_NOT .
PRIORITE_NOT -> .

TERME_3 -> TERME_4 PRIORITE_EGAL .

PRIORITE_EGAL -> slash_egal TERME_4 PRIORITE_EGAL .
PRIORITE_EGAL -> egal TERME_4 PRIORITE_EGAL .
PRIORITE_EGAL -> .

TERME_4 -> TERME_5 PRIORITE_INFERIEUR .

PRIORITE_INFERIEUR -> inferieur TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> inferieur_egal TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> superieur TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> superieur_egal TERME_5 PRIORITE_INFERIEUR .
PRIORITE_INFERIEUR -> .

TERME_5 -> TERME_6 PRIORITE_ADDITION .

PRIORITE_ADDITION -> plus TERME_6 PRIORITE_ADDITION .
PRIORITE_ADDITION -> moins TERME_6 PRIORITE_ADDITION .
PRIORITE_ADDITION -> .

TERME_6 -> TERME_7 PRIORITE_MULTIPLICATION .

PRIORITE_MULTIPLICATION -> fois TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> divise TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> rem TERME_7 PRIORITE_MULTIPLICATION .
PRIORITE_MULTIPLICATION -> .

TERME_7 -> FACTEUR PRIORITE_POINT .
TERME_7 -> moins FACTEUR PRIORITE_POINT .

PRIORITE_POINT -> point IDENT PRIORITE_POINT .
PRIORITE_POINT -> .

FACTEUR -> parenthese_ouvrante EXPR parenthese_fermante .
FACTEUR -> entier .
FACTEUR -> caractere .
FACTEUR -> true .
FACTEUR -> false .
FACTEUR -> null .  
FACTEUR -> new IDENT .
FACTEUR-> IDENT FACTEUR2 .
FACTEUR2 -> parenthese_ouvrante EXPR EXPRSTAR_VIRGULE parenthese_fermante .
FACTEUR2 -> .
FACTEUR -> character apostrophe val parenthese_ouvrante EXPR parenthese_fermante .

ACCES -> EXPR.

INSTR -> ACCES INSTR2_PRIME .
INSTR -> IDENT INSTR2 .
INSTR -> return EXPRINTERRO2 point_virgule .
INSTR -> begin INSTR INSTRSTAR end point_virgule .
INSTR -> if EXPR then INSTR INSTRSTAR ELSIFSTAR end if point_virgule .
INSTR -> for IDENT in REVERSEINTERRO EXPR point_point EXPR loop INSTR INSTRSTAR end loop point_virgule .
INSTR -> while EXPR loop INSTR INSTRSTAR end loop point_virgule .

INSTR2 -> INSTR2_PRIME.
INSTR2 -> point_virgule .
INSTR2 -> parenthese_ouvrante EXPR EXPRSTAR_VIRGULE parenthese_fermante point_virgule .

INSTR2_PRIME -> deux_points_egal EXPR point_virgule .

EXPRINTERRO2 -> EXPR.
EXPRINTERRO2 -> .

REVERSEINTERRO -> reverse .
REVERSEINTERRO -> .

ELSIFSTAR -> elsif EXPR then INSTR INSTRSTAR ELSIFSTAR .
ELSIFSTAR -> else INSTR INSTRSTAR.
ELSIFSTAR -> .

EXPRSTAR_VIRGULE -> virgule EXPR EXPRSTAR_VIRGULE .
EXPRSTAR_VIRGULE -> .

IDENT -> idf .

#RÃ©solution des conflits : 
